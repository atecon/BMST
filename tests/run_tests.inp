set verbose off
clear

include assertion.gfn

include "./src/BMST.inp" --force



open greene19_1.gdt -q -p
series GPA_w_missings = GPA
GPA_w_missings[19] = NA
series GRADE_w_missings = GRADE
GRADE_w_missings[19] = NA
bundles Parameters = null
/*
Parameters = Parameters + \
            _(which= "binary_homoskedasticity", endog = deflist(GRADE),\
            xlist = deflist(const, GPA_w_missings), expected = TRUE)
Parameters = Parameters + \
            _(which= "binary_homoskedasticity", endog = deflist(GRADE),\
            xlist = deflist(const, GPA), expected = FALSE)
Parameters = Parameters + \
            _(which= "binary_homoskedasticity", endog = deflist(GRADE_w_missings),\
            xlist = deflist(const, GPA), expected = TRUE)
*/
#/*
Parameters = Parameters + \
            _(which= "binary_reset", endog = deflist(GRADE),\
            xlist = deflist(const, GPA_w_missings), expected = TRUE)
Parameters = Parameters + \
            _(which= "binary_reset", endog = deflist(GRADE),\
            xlist = deflist(const, GPA), expected = FALSE)
Parameters = Parameters + \
            _(which= "binary_reset", endog = deflist(GRADE_w_missings),\
            xlist = deflist(const, GPA), expected = TRUE)
#*/
Parameters = Parameters + \
            _(which= "binary_burr", endog = deflist(GRADE),\
            xlist = deflist(const, GPA_w_missings), expected = TRUE)
Parameters = Parameters + \
            _(which= "binary_burr", endog = deflist(GRADE),\
            xlist = deflist(const, GPA), expected = FALSE)
Parameters = Parameters + \
            _(which= "binary_burr", endog = deflist(GRADE_w_missings),\
            xlist = deflist(const, GPA), expected = TRUE)

function void test_tests_w_missings (const bundles P)
    print "Start testing how tests handle missing values."

    loop foreach i P
    eval i
        # Given
        series y = P[i].endog[1]
        list xlist = P[i].xlist
        logit y xlist -q

        # When
        string funcname = P[i].which
        bundle Output = @funcname($model)
        actual = Output.error

         # Then
         assert((actual > 0) == P[i].expected)
    endloop
end function
test_tests_w_missings(Parameters)


open greene19_1.gdt -q -p
function void test_binary_reset_probit (const list L)
    print "Start testing binary_reset() for Probit"

    probit GRADE 0 GPA TUCE PSI -q
    bundle test = binary_reset($model)

    assert_almost_equal_num(test.test, -0.277238, 1e-6)
    assert_almost_equal_num(test.pvalue, 0.781597, 1e-6)
end function
test_binary_reset_probit(dataset)


open greene19_1.gdt -q -p
function void test_binary_homoskedasticity_lo (const list L)
    print "Start testing binary_homoskedasticity for Logit()"

    logit GRADE 0 GPA TUCE PSI -q
    bundle test = binary_homoskedasticity($model)

    assert_almost_equal_num(test.test, 3.05054, 1e-5)
    assert_almost_equal_num(test.pvalue, 0.383898, 1e-6)
end function
test_binary_homoskedasticity_lo(dataset)


open greene19_1.gdt -q -p
function void test_binary_homoskedasticity_pr (const list L)
    print "Start testing binary_homoskedasticity for Logit()"

    probit GRADE 0 GPA TUCE PSI -q
    bundle test = binary_homoskedasticity($model)

    assert_almost_equal_num(test.test, 2.72025, 1e-5)
    assert_almost_equal_num(test.pvalue, 0.436797, 1e-6)
end function
test_binary_homoskedasticity_pr(dataset)



open greene19_1.gdt -q -p
function void test_binary_burr (const list L)
    print "Start testing binary_burr()"

    logit GRADE 0 GPA TUCE PSI -q
    bundle test = binary_burr($model)

    assert_almost_equal_num(test.test, 0.025283, 1e-6)
    assert_almost_equal_num(test.pvalue, 0.873664, 1e-6)
end function
test_binary_burr(dataset)


open greene19_1.gdt -q -p
series GPA_w_missings = GPA
GPA_w_missings[19] = NA
series PSI_w_missings = PSI
PSI_w_missings[19] = NA
bundles Parameters = null
Parameters = Parameters + \
    _(mylist = deflist(GPA_w_missings, PSI_w_missings), expected = TRUE)
Parameters = Parameters + \
    _(mylist = deflist(GPA, PSI_w_missings), expected = TRUE)
Parameters = Parameters + \
    _(mylist = deflist(GPA_w_missings, PSI), expected = TRUE)
Parameters = Parameters + \
    _(mylist = deflist(GPA, PSI), expected = FALSE)
function void test_has_missings (const bundles P)
    print "Start testing has_missings()."

    loop foreach i P
        # Given + When
        actual = has_missings(P[i].mylist)
        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_has_missings(Parameters)

printf "\nInfo: All tests passed.\n"

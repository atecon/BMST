function bundle initialize_self (void)
  /* */
  return  _(error = FALSE)
end function


function scalar model_isnot_logit (const string model_name)
  /* Return TRUE if model is not supported, otherwise FALSE. */

  if model_name != "logit"
    printf "\nError: Model must be of type 'logit'.\n"
    return TRUE
  endif

  return FALSE
end function

function scalar model_isnot_logit_or_probit (const string model_name)
  /* Return TRUE if model is not supported, otherwise FALSE. */

  if model_name != "logit" && model_name != "probit"
    printf "\nError: Model must be either of type 'logit' or probit'.\n"
    return TRUE
  endif

  return FALSE
end function

function bundle binary_homoskedasticity (const bundle model,
                                         const bool verbose[1])
  /* Wrapper for calling test for no heteroskedasticity. */

  bundle self = initialize_self()

  self.error = model_isnot_logit_or_probit(model.command)
  if self.error
    return self
  endif

  self = homoskedasticity_test(model, self, verbose)

  return self
end function


function bundle binary_reset (const bundle model,
                              const bool verbose[1])
  /* Wrapper for calling RESET type of test on correct functional form. */

  bundle self = initialize_self()

  self.error = model_isnot_logit_or_probit(model.command)
  if self.error
    return self
  endif

  self = reset_test(model, self, verbose)

  return self
end function


function bundle homoskedasticity_test (const bundle model,
                                       bundle self,
                                       const bool verbose[1])
  /* In the LM test for homoskedasticity, the form of the skedastic function is
  taken to be exp(2ZtÎ³) where Zt is the vector giving the t-th observation on
  the r variables that are believed to give rise to the heteroskedasticity. */

  bundle ret = preparations(model)

  matrix U = zeros(rows(ret.lhs), 1)
  matrix V = {}
  matrix rhs = ret.r1m ~ ret.r2m


  scalar error = self.error
  matrix bhat = run_mols(ret.lhs, rhs, &U, &V, &error)
  if error
    self.error = error
    return self
  endif

  matrix fitted = ret.lhs .- U
  scalar self.test = sum(fitted.^2)

  /* The homoskedasticity  test statistic is asymptotically Chi Square with "r"
  degrees of freedom, under the null of  homoskedasticity, where "r" is the
  number of variables involved in the (alternative) heteroskedasticity. So
  calculate the (asymptotic)  p-value. */
  scalar self.pvalue = 1 - cdf(c, cols(ret.r2m), self.test)

  print_homoskedasticity_test(self, model, verbose)

  return self
end function


function matrix run_mols (const matrix y, const matrix X, matrix *U, matrix *V,
                          scalar *error)
  /* Wrapper for mols() */

  catch matrix bhat = mols(y, X, &U, &V)
  if $error
    printf "\nError: Estimation failure. Abort.\n"
    error = TRUE
    return {}
  endif

  return bhat
end function


function bundle reset_test (const bundle model,
                            bundle self,
                            const bool verbose[1])
  /* The LM test for functional form are similar to the familiar "RESET test"
  for the standard linear OLS model. */

  bundle ret = preparations(model)

  matrix r3 = ret.scalefacx .* (ret.xbeta).^2
  matrix rhs = r3 ~ ret.r1m

  # The coeffcient to be tested is that of the first regerssor - see the
  # ordering of the above group
  matrix V = zeros(rows(ret.lhs), cols(rhs))
  matrix U = zeros(rows(ret.lhs), 1)

  scalar error = self.error
  matrix bhat = run_mols(ret.lhs, rhs, &U, &V, &error)
  if error
    self.error = error
    return self
  endif

  matrix tstat = bhat ./ sqrt(diag(V))
  scalar self.test = tstat[1]

  /* The functional form  test statistic is asymptotically standard normal. So
    calculate the (asymptotic)  p-value: */
  scalar self.pvalue = 2 * (1 - cnorm(abs(self.test)))

  print_reset_test(self, model, verbose)

  return self
end function


function bundle binary_burr (const bundle model, const bool verbose[1])
  /* LM test of the null that the distribution is Logistic against the
  alternative that is is Burr Type 2 (and hence skewed - to the left or
  to the right) */

  bundle self = initialize_self()

  self.error = model_isnot_logit(model.command)
  if self.error
    return self
  endif

  scalar N = $nobs
  smpl deflist(model.ylist, model.xlist) --no-missing
  print_dropped_nobs_warning(N, $nobs)

  matrix my = {model.ylist}
  matrix mx = {model.xlist}
  matrix dee = 1 .+ exp(lincomb(model.xlist, model.coeff))

  matrix bf = 1 / dee
  matrix sf = (dee - 1) ./ dee.^2
  matrix sr = my .* sqrt(bf ./ (1 .- bf)) - (1 .- my) .* sqrt( (1.-bf) ./ bf)
  matrix scalefac = sf ./ sqrt((1 .- bf) .* bf)
  matrix r1m = mx .* scalefac
  matrix r2m = log(dee) .* sqrt(bf ./ (1 - bf))
  matrix X = r1m ~ r2m

  matrix U = zeros(rows(sr), 1)
  matrix V = {}

  scalar error = self.error
  matrix bhat = run_mols(sr, X, &U, &V, &error)
  if error
    self.error = error
    return self
  endif

  matrix fitted = sr .- U

  scalar self.test = sum(fitted.^2)
  scalar self.pvalue = pvalue(c, 1, self.test)

  print_burr_test(self, model, verbose)

  return self
end function


function void print_burr_test (const bundle self,
                              const bundle model,
                              const bool verbose)
  /* Print Logit "burr" test results. */

  if verbose
    printf "-------------------------------------------------------\n"
      printf "*** Logit model LM Test of Logistic Against Burr Type II ***\n"
      printf "H0: \t Logistic distribution\n"
      printf "H1: \t Burr (skewed) distribution\n"
      printf "N = %d\n", model.T
      printf "LM-BURR = %2.4f (prob= %.3f)", self.test, self.pvalue
      printf "\n-------------------------------------------------------\n"
  endif
end function


function void print_homoskedasticity_test (const bundle self,
                                          const bundle model,
                                          const bool verbose)
  /* Print results for test on homoskedasticity. */

  if verbose
    string estimator = (model.command == "logit") ? "Logit" : "Probit"
    printf "-------------------------------------------------------\n"
    printf "*** %s model LM test for homoskedasticity ***\n", estimator
    printf "H0: \t Residuals are homoskedastic\n"
    printf "H1: \t Residuals are heteroskedastic\n"
    printf "N = %d\n", model.T
    printf "LM-HOM = %2.3f (p=%.3f)\n", self.test, self.pvalue
    printf "-------------------------------------------------------\n"
  endif
end function


function void print_reset_test (const bundle self,
                              const bundle model,
                              const bool verbose)
  /* Print RESET test results. */

  if verbose
    string estimator = (model.command == "logit") ? "Logit" : "Probit"
    printf "-------------------------------------------------------\n"
    printf "*** %s model LM test for correct functional form ***\n", estimator
    printf "H0: \t Functional form is correct\n"
    printf "H1: \t Functional form is not correct\n"
    printf "N = %d\n", model.T
    printf "LM-RESET = %2.3f (p=%.3f)\n", self.test, self.pvalue
    printf "-------------------------------------------------------\n"
  endif
end function


function void print_dropped_nobs_warning (const scalar N_complete,
                                          const scalar N_restricted)
  /*  */

  errorif(N_complete < N_restricted, "Restricted sample cannot be larger than unrestricted one.")

  if N_complete > N_restricted
    printf "\nWarning: n = %d missing values were dropped before test computation.\n",\
      (N_complete - N_restricted)
    flush
  endif
end function


function bundle preparations (const bundle model)
    /* Prepare things that are common for a couple of tests. */

    bundle self
    list xlist_without_const = model.xlist - const

    scalar N = $nobs
    smpl deflist(model.ylist, model.xlist) --no-missing
    print_dropped_nobs_warning(N, $nobs)

    matrix self.xbeta = {lincomb(model.xlist, model.coeff)}

    matrix bf = (model.command == "logit") ? logistic(self.xbeta) \
      : cnorm(self.xbeta)
    matrix sf = (model.command == "logit") ? bf .* (1-bf) : dnorm(self.xbeta)

    matrix s = sqrt(bf .* (1 - bf))
    self.lhs = ({model.ylist} - bf) ./ s

    self.scalefacx = sf ./ s
    self.scalefacz = -self.xbeta .* self.scalefacx

    self.r1m = {model.xlist} .* self.scalefacx
    self.r2m = {xlist_without_const} .* self.scalefacz

    return self
end function


function void gui_binary_reset (void)
    /* DUMMY Wrapper function for gui menu-entry */

    bundle b = binary_reset($model)
end function
